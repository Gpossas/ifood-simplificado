name: "Ifood simplificado CI/CD"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      aws_assume_role_arn:
        required: true
      aws_s3_terraform_backend:
        required: true
      aws_region:
        required: true
      docker_access_token:
        required: true

jobs:
  before_build_terraform:
    name: Init terraform
    runs-on: ubuntu-latest
    steps:
      - name: Clone code from GitHub repository inside GitHub actions runner
        uses: actions/checkout@v4

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_assume_role_arn }}
          aws-region: ${{ secrets.aws_region }}
          mask-aws-account-id: 'no'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
          terraform_wrapper: false

      - name: Terraform Init
        run: bash terraform/scripts/terraform_init.sh
        env:
          ENV: ${{ inputs.environment }}
          AWS_S3_TERRAFORM_BACKEND: ${{ secrets.aws_s3_terraform_backend }}
          AWS_REGION: ${{ secrets.aws_region }}

      - name: Terraform Validate
        run: bash terraform/scripts/terraform_validate.sh
        env:
          ENV: ${{ inputs.environment }}

      - name: Terraform Apply
        run: bash terraform/scripts/terraform_apply_before_application_image_build.sh
        env:
          ENV: ${{ inputs.environment }}

      - name: Terraform Outputs
        id: terraform_output
        run: |
          order_placed_queue_url=$(terraform output -raw orders_microservice_queue_url)
          echo "Order Queue URL: $order_placed_queue_url"
          
          BINARY_ENCRYPTED_SECRET=$(echo -n "$order_placed_queue_url" | openssl enc -aes-256-cbc -pbkdf2 -salt -k "test");
          ENCRYPTED_SECRET=$(echo -n "$BINARY_ENCRYPTED_SECRET" | base64 -w 0);
          echo "our-secret=$ENCRYPTED_SECRET" >> $GITHUB_OUTPUT
          
        working-directory: ./terraform/environments/${{ inputs.environment }}/sqs

      - name: Debug Outputs
        run: |
          echo "order queue url: ${{ steps.terraform_output.outputs.our-secret }}"
          echo "order queue url: ${{ needs.before_build_terraform.outputs.ORDER_PLACED_QUEUE_URL }}"
    outputs:
      ORDER_PLACED_QUEUE_URL: ${{ steps.terraform_output.outputs.our-secret }}
  

  build_application_image:
    name: Build application image
    runs-on: ubuntu-latest
    needs: before_build_terraform
    steps:
      - name: debug env
        run: env
      - name: Debug outputs
        id: decrypt-token
        run: |
          ENCRYPTED_SECRET=${{ needs.before_build_terraform.outputs.ORDER_PLACED_QUEUE_URL }};
          BINARY_ENCRYPTED_SECRET=$(echo -n "$ENCRYPTED_SECRET" | base64 --decode);
          OUR_SECRET=$(echo -n "$BINARY_ENCRYPTED_SECRET" | openssl enc -aes-256-cbc -pbkdf2 -d -salt -k "test");
          echo "our-secret=$OUR_SECRET" >> $GITHUB_OUTPUT

      - name: Debug outputs 2
        run: |
          echo "our-secret=${{ needs.before_build_terraform.outputs.ORDER_PLACED_QUEUE_URL }}"
          echo "our-secret=${{ needs.before_build_terraform.outputs.our-secret }}"
          echo "our-secret:${{ steps.decrypt-token.outputs.our-secret }}"
      - name: debug env 2
        run: env

      - name: Clone code from GitHub repository inside GitHub actions runner
        uses: actions/checkout@v4

      - name: Set up jdk 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_assume_role_arn }}
          aws-region: ${{ secrets.aws_region }}

      - name: Run Tests and Build jar File For Orders Microservice
        run: cd orders_microservice && mvn clean install
        env:
          AWS_SQS_ORDER_REQUEST_URL: ${{ needs.before_build_terraform.outputs.order_placed_queue_url }}

      - name: Push image to Docker Hub For Orders Microservice
        run: |
          cd orders_microservice
          echo ${{ secrets.docker_access_token }} | docker login -u ${{ vars.DOCKER_USERNAME }} --password-stdin
          docker build --platform linux/arm64 -t ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME_ORDERS_MICROSERVICE }}:latest .
          docker push ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME_ORDERS_MICROSERVICE }}:latest

      - name: Run Tests and Build jar File For Restaurant Microservice
        run: cd restaurant_microservice && mvn clean install
        env:
          AWS_SQS_ORDER_STATUS_UPDATE_URL: ${{ needs.before_build_terraform.outputs.update_order_status_queue_url }}

      - name: Push image to Docker Hub For Restaurant Microservice
        run: |
          cd restaurant_microservice
          echo ${{ secrets.docker_access_token }} | docker login -u ${{ vars.DOCKER_USERNAME }} --password-stdin
          docker build --platform linux/arm64 -t ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME_RESTAURANT_MICROSERVICE }}:latest .
          docker push ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME_RESTAURANT_MICROSERVICE }}:latest

  after_build_terraform:
    name: Build Terraform resources after build application image
    needs: build_application_image
    runs-on: ubuntu-latest
    steps:
      - name: Clone code from GitHub repository inside GitHub actions runner
        uses: actions/checkout@v4

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_assume_role_arn }}
          aws-region: ${{ secrets.aws_region }}

      - name: Authenticate to Docker Hub
        run: echo ${{ secrets.docker_access_token }} | docker login -u ${{ vars.DOCKER_USERNAME }} --password-stdin

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Terraform Init
        run: bash terraform/scripts/terraform_init.sh
        env:
          ENV: ${{ inputs.environment }}
          AWS_S3_TERRAFORM_BACKEND: ${{ secrets.aws_s3_terraform_backend }}
          AWS_REGION: ${{ secrets.aws_region }}

      - name: Terraform Validate
        run: bash terraform/scripts/terraform_validate.sh
        env:
          ENV: ${{ inputs.environment }}

      - name: Terraform Apply
        run: bash terraform/scripts/terraform_apply_after_application_image_build.sh
        env:
          ENV: ${{ inputs.environment }}
          ORDERS_IMAGE: ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME_ORDERS_MICROSERVICE }}:latest
          RESTAURANT_IMAGE: ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME_RESTAURANT_MICROSERVICE }}:latest